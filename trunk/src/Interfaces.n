
using System;
using Chalks.Network;
using Chalks.ConcurrentEdition;

namespace Chalks
{

    public interface ICeForNetwork
    { // Elements of ConcurrentEditable used by the Network module
        set_network_interface(network_node_instance :NetworkNode) :void;
        receive_operation(op :Operation) :void;
        add_site(site_id :Guid) :void;
        delete_site(site_id :Guid) :void;
        get_status() :ConcurrentEditableNodeStatus;
        set_status(status :ConcurrentEditableNodeStatus) :void;
    }

    public interface IGuiForNetwork
    { // Elements of ChalksWindow used by the Network Module
        log(_:int, _:string):void;
        set_site_id(site_id :Guid) :void;
        receive_message(from :Guid, sender_nickname:string, message :string) :void;
        connection_closed(site_id :Guid) :void;
    }

    
    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~    

    public interface INetworkForGui
    { // Network interface for the Gui
        get_site_id() :Guid;
        get_self_uri() :string;
        start_collaborating() :bool;   
        start_collaborating(uri :string) :bool;   
        stop_collaborating():void;
        get_connection_status() :string*Guid*Nemerle.Collections.ICollection[Guid];
        discover_nodes() :void;
        
        send_message(addressee :Guid, message :string) :void;
        send_message(comes_from :Guid,
                     sender :Guid, sender_nickname :string,
                     addressee :Guid, message :string) :void;

        get_site_nickname(site_id :Guid) :string;
        
        set_nickname(_nickname :string) :void;
        set_password(_password :string) :void;
    }


    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    
    public interface ITextBuffer
    { // This interface define a recipient where the ConcurrentEdition system store the up to date version of the text.
      // Used by Ce
        
        insert_text(site_id :Guid, offset:int, text:string):void;
        // Due of UTF-8 encoding character counts are referred to as "offsets", 
        // this is consistent with the GTK code
        
        delete_text(offset:int, length:int): string;
        // returns the deleted text
        
        get_text():string;
        // return all the text in the buffer
        
        set_text(text:string):void;
        // overwrite the buffer text content
    }
    

    public interface INetworkForCe
    { // this are the methods that the ConcurrentEdition layer use of the NetworkNode object
        log(_ :int, _:string) :void;
        get_site_id() :Guid;
        send_operation(comes_from :Guid, op:Operation) :void;
    }



}