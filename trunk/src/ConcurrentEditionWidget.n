/*
This documents define the widget where multiple users write in the same time.
*/

// A good TextViewer tutorial
// http://www.moeraki.com/pygtktutorial/pygtk2tutorial/ch-TextViewWidget.html

using System;
using Gtk;
//using GtkSourceView;

// about GtkSourceView on windows
// http://lists.ximian.com/archives/public/gtk-sharp-list/2003-December/002949.html

using Nemerle.Collections;
using Nemerle.Utility;

using Chalks;
using Chalks.Helpers;
using Chalks.ConcurrentEdition;

namespace Chalks.ConcurrentEditionWidget
{

    public class ConcurrentEditionWidget : TextView/*SourceView*/, Chalks.ConcurrentEdition.ITextBuffer
    {
        
	static to_send_tag :TextTag = TextTag("to_send");
        static mutable applying_operation :bool = false;
        static mutable gui :Gui.ChalksWindow;

        tags_to_site_id :Hashtable[TextTag, Guid] = Hashtable();
        
        mutable site_id :Guid;
        mutable site_tag :TextTag;
        
        timeout_handler_id :uint;

        undo_stack :Stack[Operation];
        redo_stack :Stack[Operation];
        
	public this(_gui :Gui.ChalksWindow)
        {
            gui = _gui;
            
	    //ShowLineNumbers = true;
           
            // create the base Tags
            //to_send_tag = TextTag("to_send");
            //to_send_tag.Style = Pango.Style.Oblique;
            to_send_tag.ForegroundGdk = Gdk.Color(165b, 165b, 165b);
            to_send_tag.Underline = Pango.Underline.Low;
            Buffer.TagTable.Add(to_send_tag);
            
            // register handlers
            this.Buffer.InsertText += on_insert_text_event;
            this.Buffer.DeleteRange += on_delete_range_event;
            //this.Buffer.PasteClipboard += on_paste_clipboard_event;
            
            // call flush_inserted_text each second
            timeout_handler_id = Timeout.Add(1000, flush_inserted_text); 

            // undo, redo
            undo_stack = Stack();
            redo_stack = Stack();
                        
            ;
        }

        /*new public Finalize() :void
        { // destructor

            //base.Finalize();
            Console.WriteLine("Finalizing cew"); Console.Out.Flush();
            Timeout.Remove(timeout_handler_id);
        }*/
        
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        flush_inserted_text() :bool
        {
            /* Insertions are flushed:
               - each second
               - each time someone ends a word
               - each time someone ends a phrase
            */

            if (this.Buffer != null) {
                mutable found_a_region = false;
                
                def start_iter = this.Buffer.StartIter.Copy();
                def end_iter = this.Buffer.StartIter.Copy();
                
                found_a_region = start_iter.HasTag(to_send_tag);
                _ = end_iter.ForwardToTagToggle(to_send_tag); // go to the first Toggle
                
                
                // search the first to_send tagger region
                when (! found_a_region) {
                    _ = start_iter.ForwardToTagToggle(to_send_tag);
                    _ = end_iter.ForwardToTagToggle(to_send_tag);
                    
                    found_a_region = ! start_iter.Equal(Buffer.EndIter);
                }
                
            //log($"flush: $(found_a_region) first region at [$(start_iter.Offset),$(end_iter.Offset)]");
                
                while(found_a_region)
                { // iterate over the different regions
                    def text = Buffer.GetSlice(start_iter, end_iter, false);
                    def pos = start_iter.Offset;
                    def executed_before_creation = true;
                    
                    //Buffer.RemoveTag(to_send_tag, start_iter, end_iter);
                    Buffer.RemoveAllTags(start_iter, end_iter); // inserted text has no tag
                    Buffer.ApplyTag(site_tag, start_iter, end_iter); //apply local tag
                    
                    def ce = gui.concurrent_editable;
                    def op = ce.generate_operation(executed_before_creation,
                                                   OperationType.Insert, pos, text);
                    // operations generated locally are not executed
                    // (because they where executed before generation)
                    // thus iterators still being valids
                    undo_stack.Push(op); // store for futures undos
                    
                    // jump to the next section
                    _ = start_iter.ForwardToTagToggle(to_send_tag);
                    _ = end_iter.ForwardToTagToggle(to_send_tag);
                    _ = start_iter.ForwardToTagToggle(to_send_tag);
                    _ = end_iter.ForwardToTagToggle(to_send_tag);
                    
                    found_a_region = ! start_iter.Equal(Buffer.EndIter);
                }
                
                true; // return true to be called periodically
                
            } else {
                false; // return false to stop the periodical behaviour
            }
        }
        
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        

        #region Buffer insertions and deletions events handlers
        
        /*        
        OnKeyPressEvent( _event :Gdk.EventKey) :bool
        {
            log("hi there !");
            true; // block the next handlers
        }         
        */

        on_insert_text_event(_o :object, args :InsertTextArgs) :void
        { // args.Length :int, Pos :TextIter, Text :string

            when(!applying_operation) // detect if programatical or not
            { // inserted manually

                // apply to_send_tag
                def start_iter = args.Pos.Copy(); // can I do this faster ?
                def end_iter = args.Pos.Copy(); 
                
                // the handler is called after the text was inserted
                _ = start_iter.BackwardChars(args.Length); 

                Buffer.RemoveAllTags(start_iter, end_iter);
                Buffer.ApplyTag(to_send_tag, start_iter, end_iter);
                //log(String.Format("Applying exclusive tag {0} from {1} to {2}", to_send_tag.Name.ToString(), start_iter.Offset.ToString(), end_iter.Offset.ToString())); 
                
                ;
            }
            
            // log("Inserted at offset " + args.Pos.Offset.ToString() + String.Format(" {0} chars that forms the text: {1}", args.Length, args.Text));

            ;
        }


        
        [GLib.ConnectBefore] // need to be static to be ConnectedBefore
	protected static on_delete_range_event(_o :object, args :DeleteRangeArgs) :void
        {
            
            when(!applying_operation) // detect if programatical or not
            {
                // log($"Will delete text in the range: $(args.Start.Offset), $(args.End.Offset). Length : $(args.End.Offset - args.Start.Offset)");
                def pos = args.Start.Offset;
                def length = args.End.Offset - pos;
                def executed_before_creation = true;
                _ =
                gui.concurrent_editable.generate_operation(executed_before_creation,
                                                           OperationType.Delete, pos, length);
            }
            ;
        }

        #endregion

        
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        
        
        #region Helpers
                
        create_site_tag( site_id :Guid) :TextTag
        { // create a new tag with a new color

            def tag = TextTag(site_id.ToString());
            Buffer.TagTable.Add(tag); // add it to the widget
            tags_to_site_id[tag] = site_id; // add to the inverse hashtable
            
            // local helper function
            def hsv_to_rgb(h :float, s :float, v :float) :array[float]
            {                
                if (s == 0.0f) 
                    array [v, v, v];
                else {
                    def i = Math.Floor((h*6.0f) :>double) :>float; 
                    def ii = i :>int;
                    def f = (h*6.0f) - i;
                    def p = v*(1.0f - s);
                    def q = v*(1.0f - s*f);
                    def t = v*(1.0f - s*(1.0f-f));
                    
                    if (ii%6 == 0) 
                        array [v, t, p];
                    else match (ii) {
                        | 1 => array [q,v,p];
                        | 2 => array [p,v,t];
                        | 3 => array [p,q,v];
                        | 4 => array [t,p,v];
                        | 5 => array [v,p,q];
                        | _ => array [q,v,p];
                    }
                        
                }
            }; // end of hsv_to_rgb

        
            // find a pleasant color randomly            
           
            // hue == tint is random
            // saturation: 0.0 white, 1.0 intense color
            def rgb = hsv_to_rgb(Random().NextDouble() :>float, 0.20f, 1.0f ); 
            // rgb to color, color to tag
            def rgb_bytes = array(rgb.Length)  :array[byte];
            for(mutable c=0; c < rgb.Length; c++ )
                rgb_bytes[c] = (rgb[c] * 255f) :>byte;


            def background_color = Gdk.Color(rgb_bytes[0],rgb_bytes[1],rgb_bytes[2]);
            tag.BackgroundGdk = background_color;            

            // how to show who wrote a text
            // http://svn.myrealbox.com/source/trunk/gtk-sharp/sample/GtkDemo/DemoHyperText.cs
            tag;
        }


        log(text :string) :void
        {
            gui.log(text);
        }

        #endregion
                
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        

        #region ITextBuffer interface implementation, methods accessed by ConcurrentEditable and Gui
        
        public get_text() :string
        { 
            Buffer.Text;
        }


        public set_text(text:string) :void
        { 
            // <<< has to do any check before doing this ?
            Buffer.Text = text;
        }
        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        

        #region ITextBuffer interface implementation, methods accessed by ConcurrentEditable

        public insert_text(site_id :Guid, offset:int, text:string) :void
        {
            mutable site_tag = Buffer.TagTable.Lookup(site_id.ToString());

            when (site_tag == null) // check if user exist
                site_tag = create_site_tag(site_id); // create a new tag for a new user
                
            mutable iter = Buffer.GetIterAtOffset(offset);
            
            applying_operation = true;
            Buffer.InsertWithTags(ref iter, text, array[site_tag]);
            applying_operation = false;
            ;
        }

        public delete_text(offset:int, length:int) :string
        {
            mutable start_iter = Buffer.GetIterAtOffset(offset);
            mutable end_iter = Buffer.GetIterAtOffset(offset + length);

            def deleted_text =  Buffer.GetSlice(start_iter, end_iter, true);
            applying_operation = true;
            Buffer.Delete(ref start_iter, ref end_iter);
            applying_operation = false;
            deleted_text;
        }

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Methods accessed by Gui
        public set_site_id(_site_id :Guid) :void
        {
            // create the local tag
            // this allow to distinguish local text (white background)
            // from other users ones (colored background)

            site_id = _site_id;
            
            // check if local user exist
            site_tag = Buffer.TagTable.Lookup(site_id.ToString());
            when (site_tag == null) 
                site_tag = create_site_tag(site_id); // create a new tag for a new user
                // create_site_id already register it
            
            // set background as white
            site_tag.BackgroundGdk = Gdk.Color(255b, 255b, 255b);
        }

        public get_site_color(site_id :Guid) :Gdk.Color
        {
            mutable site_tag = Buffer.TagTable.Lookup(site_id.ToString());
            when (site_tag == null) // check if user exist
                site_tag = create_site_tag(site_id); // create a new tag for a new user
            
            site_tag.BackgroundGdk;
        }

        public undo() :void
        {
            if(undo_stack.Count > 0) {
                def done_op = undo_stack.Pop();
                
                // undo the past operation in the present
                // return the operation that undo the past operation in the present
                def ce = gui.concurrent_editable;
                def undo_op = ce.generate_undo(done_op);

                redo_stack.Push(undo_op);
            } else {
                log("No more operations to undo");
            }
        }


        public redo() :void
        { // redo is to undo the undoed
            
            if(redo_stack.Count > 0) {
                def undo_op = redo_stack.Pop();

                def ce = gui.concurrent_editable;
                def redo_op = ce.generate_undo(undo_op);
                
                undo_stack.Push(redo_op);
            }else {
                log("No more operations to redo");
            }
        }

        public get_site_id_under_mouse() :Guid
        { 
            // using
            //http://lists.ximian.com/archives/public/gtk-sharp-list/2004-August/004625.html
            //this.GetWindow (TextWindowType.Widget).GetPointer (out xloc, out yloc, out mask);
            //TextIter ti = this.GetIterAtLocation(xloc,yloc);

            mutable xloc = 0;
            mutable yloc = 0;
            mutable mask = Gdk.ModifierType.ReleaseMask :Gdk.ModifierType;
            _ = this.GetWindow(TextWindowType.Widget).GetPointer (out xloc, out yloc, out mask);
            def iter = this.GetIterAtLocation(xloc, yloc);
            def tags = iter.Tags;

            if (tags.Length > 0) {
                def tag = tags[0];                
                if(tags_to_site_id.Contains(tag)) tags_to_site_id[tag];
                else Guid.Empty;                
            } else Guid.Empty;
        }        
        #endregion
    } // end of class ConcurrentEditionWidget


    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

    
}

/*
class SourceViewTest
{
	static string filename;

	static void Main (string[] args)
	{
		if (args.Length != 1 || !File.Exists (args[0]))
			PrintUsage ();
		filename = args[0];

		Application.Init ();
		new SourceViewTest ();
		Application.Run ();
	}

	static void PrintUsage ()
	{
		Console.WriteLine ("usage: SourceViewTest.exe <csfile>");
		Environment.Exit (0);
	}

	SourceViewTest ()
	{
		Window win = new Window ("SourceView test");
		win.SetDefaultSize (600, 400);
		win.WindowPosition = WindowPosition.Center;
		win.DeleteEvent += new DeleteEventHandler (OnWinDelete);
		win.Add (CreateView ());
		win.ShowAll ();
	}

	ScrolledWindow CreateView ()
	{
		ScrolledWindow sw = new ScrolledWindow ();
		SourceView view = new SourceView (CreateBuffer ());
		sw.Add (view);
		return sw;
	}

	SourceBuffer CreateBuffer ()
	{
		SourceLanguagesManager manager = new SourceLanguagesManager ();
		SourceLanguage lang = manager.GetLanguageFromMimeType ("text/x-csharp");

		SourceBuffer buffer = new SourceBuffer (lang);
		buffer.Highlight = true;
		StreamReader sr = File.OpenText (filename);
		buffer.Text = sr.ReadToEnd ();
		sr.Close ();
		return buffer;
	}

	void OnWinDelete (object sender, DeleteEventArgs a)
	{
		Application.Quit ();
		a.RetVal = true;
	}
}
*/
