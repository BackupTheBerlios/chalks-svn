/*
This code correspond to an implementation of a Concurrent Editable Text buffer.

The code is strictly based on the works of Chengzheng Sun.

Actually all the function were written in order to follow as much as possible the notation introduced in his papers. So most of the code is procedure oriented and not strictly pythonic.

Search at http://www.researchindex.com for the files:

    operational_transformation_issues_algorithms_achievements.djvu
    sun98achieving.pdf (<- the must)
    sun97generic.pdf (citeseer.nec.jp.com/sun97generic.htm)
    sun98operational.pdf
    sun98reversible.pdf

You need this documents to understand the code.
*/

/*
10/04/2003 Drafting the architecture. Rodrigob.

*/

using System;
using Chalks;

namespace Chalks.ConcurrentEdition
{	  
	  
    public class ConcurrentEditable
    { /*This is the core object of Chalks.
	This class defines an object that is able to manage concurrent edition from diferent sites.
        */

	// Definition of the members
        network_node  :Chalks.Network.NetworkNode;

        this(site_id :int)
        {
            ;   
        }
        
        
        public get_network_node() :Chalks.Network.NetworkNode
        {
            network_node;
        }

        
    }
    
    
    public interface ITextBuffer
    { /**
        This interface define a recipient where the ConcurrentEdition system store the up to date version of the text.
        
        This interface is then implemented by the element that presents the
        */
        insert_text(offset:int, text:string):void;
        // Due of UTF-8 encoding character counts are referred to as "offsets", 
        // this is consistent with the GTK code
        
        delete_text(offset:int, length:int):void;
        
        get_text():string;
        // return all the text in the buffer
        
        set_text(text:string):void;
        // overwrite the buffer text content
    }
    

    class pConcurrentEditable
    {

        public this()
        { 
            ;
        }
        
        public get_text() :void
        {
            ;
        }

        public receive_operation() :void
        {
            ;
        }

        apply() :void
        {
            ;
        }

        execute() :void
        {
            ;
        }

        delete_text() :void
        {
            ;
        }

        collect_garbage() :void
        {
            ;
        }

        update_SVT() :void
        {
            ;
        }

        generate_operation() :void
        {
            ;
        }

        gen_op() :void
        {
            ;
        }

        gen_Op() :void
        {
            ;
        }


        #region Internal GOT algorithm functions
        
        is_causally_ready() :void
        {
            ;
        }

        check_total_ordering() :void
        {
            ;
        }

        are_dependent() :void
        {
            ;
        }

        are_concurrent() :void        
        {
            ;
        }

        GOT() :void
        {
            ;
        }

        LET() :void
        {
            ;
        }

        reverse() :void
        {
            ;
        }

        IT() :void        
        {
            ;
        }

        IT_II() :void        
        {
            ;
        }

        IT_ID() :void        
        {
            ;
        }

        IT_DI() :void        
        {
            ;
        }

        IT_DD() :void        
        {
            ;
        }

        ET() :void       
        {
            ;
        }

        ET_II() :void        
        {
            ;
        }

        ET_ID() :void        
        {
            ;
        }

        ET_DI() :void 
        {
            ;
        }
        
        ET_DD() :void        
        {
            ;
        }

        #endregion

        #region Helper method to keep a clear syntax
        Op() :void        
        {
            ;
        }

        op() :void        
        {
            ;
        }

        T(o :Operation) :OperationsType
        { // Return the type of operation ("Insert" or "Delete")
           o.Type;
        }

        P() :void        
        {
            ;
        }

        L() :void        
        {
            ;
        }

        S() :void        
        {
            ;
        }

        Splitted() :void        
        {
            ;
        }

        Check_LI() :void        
        {
            ;
        }

        Save_LI() :void        
        {
            ;
        }

        Recover_LI() :void        
        {
            ;
        }

        Check_RA() :void        
        {
            ;
        }

        Save_RA() :void        
        {
            ;
        }

        Check_BO() :void        
        {
            ;
        }

        Convert_AA() :void        
        {
            ;
        }
    
    }

    public enum OperationsType { |Insert |Delete |SetText };

    public class Operation // :dict
    {

        // Definitions of members
        public Type :OperationsType;

        this()
        {
            ;
        }

        Equal() :void        
        {
            ;
        }

        ToString() :void        
        {
            ;
        }

        set_timestamp() :void        
        {
            ;
        }

        get_timestamp() :void        
        {
            ;
        }

    }

} // end of the namespace Chalks.ConcurrentEditable
