/*
This code correspond to an implementation of a Concurrent Editable Text buffer.

The code is strictly based on the works of Chengzheng Sun.

Actually all the function were written in order to follow as much as possible the notation introduced in his papers. So most of the code is procedure oriented and not strictly pythonic.

Search at http://www.researchindex.com for the files:

    operational_transformation_issues_algorithms_achievements.djvu
    sun98achieving.pdf (<- the must)
    sun97generic.pdf (citeseer.nec.jp.com/sun97generic.htm)
    sun98operational.pdf
    sun98reversible.pdf

You need this documents to understand the code.
*/


using System;
using System.IO;
using System.Guid;
using Chalks;
using Chalks.Network;
using Chalks.Gui.ChalksWindow; // get access to log function

namespace Chalks.ConcurrentEdition
{	  
	  
    public class ConcurrentEditable :ICeForNetwork
    { /*This is the core object of Chalks.
	This class defines an object that is able to manage concurrent edition from diferent sites.
        */

	// Definition of the members
        network_node  :Chalks.Network.NetworkNode;
        text_buffer :ITextBuffer;

        mutable site_id :Guid;
        
        public this(text_buffer_instance :ITextBuffer)
        {
            site_id = Guid.Empty;
            text_buffer = text_buffer_instance;

            //log("Concurrent editable instance created");
            ;   
            
        }
        
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Methods used by Gui

        public save_file(file_path :string) :void
        {
            def file_extension =  Path.GetExtension(file_path);
            match(file_extension)
            {
                | ".txt" =>
                    def stream = IO.StreamWriter(file_path);
                    stream.Write(text_buffer.get_text());
                    stream.Close();
                  
                | _ => 
                  Console.WriteLine("Do not know how to save the content in the format " + file_extension);
              }
        }

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Methods used by ConcurrentEditionWidget
        
        public generate_operation(optype :OperationType, pos :int, text :string) :void
        {
            assert(this.site_id != Guid.Empty);
            assert(optype == OperationType.Insert);

            log($"generating insert($(pos), '$(text)')");
            // create operation object
            // apply localy
            // send to the peers
            ;
        }
        public generate_operation(optype :OperationType, pos :int, length :int) :void
        {
            assert(this.site_id != Guid.Empty);
            assert(optype == OperationType.Delete);

            log($"generating delete($(pos), $(length))");
            // create operation object
            // apply localy
            // send to the peers
            ;
        }


        
        #endregion

        
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
        
        #region Methods used by Network, implementation of ICeForNetwork

        public set_network_interface(network_node_instance :NetworkNode) :void
        {

            site_id = network_node_instance.site_id;
            //log("ConcurrentEditable has setup his network interface");
            ;
        }

        public receive_operation(op :Operation) :void
        {
            ;
        }

        public add_site(site_id :Guid) :void
        {
            ;
        }

        public delete_site(site_id :Guid) :void
        {
            ;
        }
        #endregion
        
    } // end of class ConcurrentEditable
    
    
    public interface ITextBuffer
    { /**
        This interface define a recipient where the ConcurrentEdition system store the up to date version of the text.
        
        This interface is then implemented by the element that presents the
        */
        insert_text(site_id :Guid, offset:int, text:string):void;
        // Due of UTF-8 encoding character counts are referred to as "offsets", 
        // this is consistent with the GTK code
        
        delete_text(offset:int, length:int):void;
        
        get_text():string;
        // return all the text in the buffer
        
        set_text(text:string):void;
        // overwrite the buffer text content
    }
    

    class pConcurrentEditable
    {

        public this()
        { 
            ;
        }
        
        public get_text() :void
        {
            ;
        }

        public receive_operation() :void
        {
            ;
        }

        apply() :void
        {
            ;
        }

        execute() :void
        {
            ;
        }

        delete_text() :void
        {
            ;
        }

        collect_garbage() :void
        {
            ;
        }

        update_SVT() :void
        {
            ;
        }

        generate_operation() :void
        {
            ;
        }

        gen_op() :void
        {
            ;
        }

        gen_Op() :void
        {
            ;
        }


        #region Internal GOT algorithm functions
        
        is_causally_ready() :void
        {
            ;
        }

        check_total_ordering() :void
        {
            ;
        }

        are_dependent() :void
        {
            ;
        }

        are_concurrent() :void        
        {
            ;
        }

        GOT() :void
        {
            ;
        }

        LET() :void
        {
            ;
        }

        reverse() :void
        {
            ;
        }

        IT() :void        
        {
            ;
        }

        IT_II() :void        
        {
            ;
        }

        IT_ID() :void        
        {
            ;
        }

        IT_DI() :void        
        {
            ;
        }

        IT_DD() :void        
        {
            ;
        }

        ET() :void       
        {
            ;
        }

        ET_II() :void        
        {
            ;
        }

        ET_ID() :void        
        {
            ;
        }

        ET_DI() :void 
        {
            ;
        }
        
        ET_DD() :void        
        {
            ;
        }

        #endregion

        #region Helper method to keep a clear syntax
        Op() :void        
        {
            ;
        }

        op() :void        
        {
            ;
        }

        T(o :Operation) :OperationType
        { // Return the type of operation ("Insert" or "Delete")
           o.Type;
        }

        P() :void        
        {
            ;
        }

        L() :void        
        {
            ;
        }

        S() :void        
        {
            ;
        }

        Splitted() :void        
        {
            ;
        }

        Check_LI() :void        
        {
            ;
        }

        Save_LI() :void        
        {
            ;
        }

        Recover_LI() :void        
        {
            ;
        }

        Check_RA() :void        
        {
            ;
        }

        Save_RA() :void        
        {
            ;
        }

        Check_BO() :void        
        {
            ;
        }

        Convert_AA() :void        
        {
            ;
        }
    
    }

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    #region Definition of the Operation class
    
    public enum OperationType { |Insert |Delete |SetText };

    public class Operation
    {

        // Definitions of members
        public Type :OperationType;
        public Pos  :int;
        public Text :string;
        public Length :int;
        
        public this(optype :OperationType, pos :int, text :string)
        {
            assert(optype == OperationType.Insert);
            Type = optype;
            Pos = pos;
            Text = text;
            Length = 0;
            ;
        }

        public this(optype :OperationType, pos :int, length :int)
        {
            assert(optype != OperationType.Delete);
            Type = optype;
            Pos = pos;
            Length = length;
            Text = "";
            ;
        }

        public this(optype :OperationType, text :string)
        {
            assert(optype != OperationType.SetText);
            Type = optype;
            Pos = 0;
            Length = 0;
            Text = "";
            ;
        }
        
        Equal() :void        
        {
            ;
        }

        public override ToString() :string
        {
            "";
        }

        set_timestamp() :void        
        {
            ;
        }

        get_timestamp() :void        
        {
            ;
        }

    }
    #endregion
    
    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


    public interface ICeForNetwork
    { // Elements of ConcurrentEditable used by the Network module
        set_network_interface(network_node_instance :NetworkNode) :void;
        receive_operation(op :Operation) :void;
        add_site(site_id :Guid) :void;
        delete_site(site_id :Guid) :void;
    }
        
} // end of the namespace Chalks.ConcurrentEditable
