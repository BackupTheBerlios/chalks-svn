/*
Test the Network class
*/

using System;

using Chalks;
using Chalks.Gui;
using Chalks.Network;
using Chalks.ConcurrentEdition;
using Chalks.ConcurrentEditionWidget;

namespace Network
{    
    using NUnit.Framework;

    [TestFixture]
    public class NetworkTests
    {
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Manual testing
        public this()
        {
            Init(); TestMessageBroadcast(); Dispose();
            Init(); TestAdressedMessage(); Dispose();
            Init(); TestOperationsEmission(); Dispose();
            
            Console.WriteLine("\nNetwork tests passed.");
        }
        
        static public Main() :void
        {
            _ = NetworkTests();
        }

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Global variables
        num_of_sites = 5;
        mutable nodes :array[NetworkNode] = array(num_of_sites);
        mutable guis :array[GuiForNetworkTest] = array(num_of_sites);
        mutable cces :array[CeForNetworkTest] = array(num_of_sites);

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region TestFixture SetUp and TearDown
        
        [TestFixtureSetUp]
        public Init() :void
        {

            Console.WriteLine("Doing the Network tests setup");
            
            // Create 5 nodes
            for(mutable c=0; c<nodes.Length; c+=1) {
            //foreach(n in nodes) {
                def dummy_gui = GuiForNetworkTest();
                def dummy_ce = CeForNetworkTest();

                cces[c] = dummy_ce;
                guis[c] = dummy_gui;
                nodes[c] = NetworkNode(dummy_gui, dummy_ce, $"node$(c)");
                nodes[c].set_nickname($"Node$(c)");
            }

            
            // Connects them as shown in chalks/doc/schemas/network_example
            _ = nodes[1].start_collaborating(nodes[0].get_self_uri());
            _ = nodes[2].start_collaborating(nodes[0].get_self_uri());
            _ = nodes[3].start_collaborating(nodes[0].get_self_uri());
            _ = nodes[4].start_collaborating(nodes[3].get_self_uri());
            
            
            ;
        }

        [TestFixtureTearDown]
        public Dispose() :void
        {
            Console.WriteLine("Doing the Network tests disposal");
            
            for(mutable c=0; c<nodes.Length; c+=1) {
                nodes[c].stop_collaboration_service(); // free the uris
                guis[c]  = null;
                nodes[c] = null;
            }
            ;
        }
    
        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Chat tests (adressed messages and broadcasted messages)
        
        [Test]
        public TestMessageBroadcast() :void
        {
            
            Console.WriteLine("Running TestMessageBroadcast");
            Console.Out.Flush();
            
            def test_message = "Hello everyone !";
            def message_emitter = 3;
            
            // send a broadcast
            def comes_from = nodes[message_emitter].get_site_id();
            def sender = nodes[message_emitter].get_site_id();
            def addressee = Guid.Empty; // no addressee
            nodes[message_emitter].send_message(comes_from, sender, addressee, test_message);
                      
            // way one second
            System.Threading.Thread.Sleep(1000);
            
            // check that every node has received it 
            for(mutable c=0; c<nodes.Length; c+=1) {
                when(c != message_emitter)
                    Assert.AreEqual(test_message, guis[c].received_messages);
            }

            Console.WriteLine("TestMessageBroadcast passed.\n");
            ;
        }

        [Test]
        public TestAdressedMessage() :void
        {

            Console.WriteLine("Running test TestAdressedMessage");
            Console.Out.Flush();
            
            def test_message = "Hello you !";
            def message_emitter = 3;
            def message_adressee = 1;
            
            // send the message
            def comes_from = nodes[message_emitter].get_site_id();
            def sender = nodes[message_emitter].get_site_id();
            def addressee = nodes[message_adressee].get_site_id();
            nodes[message_emitter].send_message(comes_from, sender, addressee, test_message);
                      
            // way one second
            System.Threading.Thread.Sleep(1000);
            
            // check that every node has received it 
            for(mutable c=0; c<nodes.Length; c+=1) {
                when(c != message_emitter)
                    if (c == message_adressee)
                        Assert.AreEqual(test_message, guis[c].received_messages);
                    else
                        Assert.AreEqual("", guis[c].received_messages);
            }

            Console.WriteLine("TestAdressedMessage passed.\n");
            ;            
        }

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

        #region Operations emission reception tests

        public TestOperationsEmission() :void
        { // This test only verify that messages are receive by every node
          // Tests about the interpretation of the operations
          // can be found in TestConcurrentEdition.n

            
            Console.WriteLine("Running test OperationsEmission");
            Console.Out.Flush();
            
            // generate an operation
            def operation_emitter = 4;

            def comes_from = nodes[operation_emitter].get_site_id();
            def op = Operation(OperationType.Insert, 0, "ABC",
                               nodes[operation_emitter].get_site_id(),
                               Nemerle.Collections.Hashtable() );
            nodes[operation_emitter].send_operation(comes_from, op);
            
            // way one second
            System.Threading.Thread.Sleep(1000);
            
            // check that every node has received it 
            for(mutable c=0; c<nodes.Length; c+=1) {
                when(c != operation_emitter)
                    Assert.AreEqual([op], cces[c].received_operations);
            }

            
            Console.WriteLine("Test OperationsEmission passed.\n");
        }
        #endregion
        
        
    } // end of NetworkTests class


    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

    #region Helper classes

    public class GuiForNetworkTest :IGuiForNetwork
    {
        // implements the basic methods that Network uses from Gui

        public mutable received_messages = "";
        
        public this()
        {
            ;
        }

        public log( verbosity :int, message :string) :void
        { 
            
            when(verbosity <= Helpers.verbosity_level) {
                Console.WriteLine(message);
                Console.Out.Flush();
            }
        }

        
        public set_site_id(site_id :Guid) :void
        {
            Console.WriteLine($"Gui: set_site_id($(site_id.ToString()))");
            ;
        }
        
        public receive_message(from :Guid, message :string) :void
        {
            Console.WriteLine($"Gui: Received from $(from.ToString()) the message $(message)");
            received_messages += message;
            ;
        }
        
    }
    


    public class CeForNetworkTest :ICeForNetwork
    {
        // implements the basic methods that Network uses from ConcurrentEdition.ConcurrentEditable
        public mutable received_operations :list[Operation] = [];
        mutable network_node  :INetworkForCe;
        
        public this()
        {
            ;
        }
        
        public set_network_interface(network_node_instance :NetworkNode) :void
        {
            Console.WriteLine($"Ce: Setting network interface using instance $(network_node_instance.ToString())");

            network_node = network_node_instance;
            ;
        }

        public receive_operation(op :Operation) :void
        {
            Console.WriteLine(
            $"Ce $(network_node.get_site_id().ToString().Substring(0,8)): Received operation $(op.ToString())");
            received_operations = received_operations.Append([op]);
        }

        public add_site(site_id :Guid) :void
        {
            Console.WriteLine($"Ce: Adding site $(site_id.ToString())");
            ;
        }

        public delete_site(site_id :Guid) :void
        {
            Console.WriteLine($"Ce: Deleting site $(site_id.ToString())");
            ;
        }

        public get_status() :ConcurrentEditableNodeStatus
        { // return a copy of the node status, to initialize another node
            
            def status = ConcurrentEditableNodeStatus();

            //status.Text = Text.Copy();
            //status.HB = HB.Copy();
            //status.SV = SV.Copy();
                        
            status;
        }

        public set_status(_status :ConcurrentEditableNodeStatus) :void
        { // (re)initialize the internal state (occurs when entering in an existing session)

            ;

        }

    }

    #endregion

    
} // end of namespace
