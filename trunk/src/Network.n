/*

*/

/*
10/04/2003 Drafting the architecture. Rodrigob.

*/

using System;
using System.Guid;

using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Tcp;

using Chalks.ConcurrentEdition;
using Chalks.Gui.ChalksWindow;

            
namespace Chalks.Network
{

    class ConcurrentEditableNodeProxy :MarshalByRefObject
    // manage the network calls to the local calls
    // all his public methods are exposed to remote calls
    // this is the object that is passed to other nodes when login
    {
        this(local_node :NetworkNode)
        {
            ;
        }

        public receive_operation(op :Operation) :void
        {
            ;
        }

        public receive_message(message :string) :void
        {
            ;
        }

    }

    public class NetworkNode
    {

        // <<< has to pass default parameters: password, port
        public this(cce :ConcurrentEditable) 
        {
            // register ourself with the cce object (we give him network access)
            cce.set_network_interface(this); 

            log("Network instance created");
        }
            
        # region Methods used by the Gui
        public send_message(site_id :int, message :string) :void 
        // sends a message to another user
        { 
            ;
        }

        public get_own_uri() :void
        // get the uri of the published object
        { 
            ;
        }

        public get_site_nickname(site :Guid) :string
        // return the nickname of a remote user
        { 
            "non_implemented_nickname";
        }

        public discover_nodes() :void
        // return a list of published documents->uri
        // this method use RendezVous services 
        { 
            ;
        }

        public change_password() :void
        // change the access password for the local document
        { 
            ;
        }
        #endregion

        
        #region Methods used by the ConcurrentEditable object

        public send_operation() :void
        // broadcast an operation to the other sites
        { 
            ;
        }

        public get_site_id() : Guid
        // return the unique site id for the local document
        {
            System.Guid.NewGuid();
        }

        #endregion

    }

}