/*
Helpers classes and Macros for the development.
*/

namespace Chalks {

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
   
    #region Typed ArrayList

    [System.Serializable]
    public class ArrayList['t] : System.Collections.ArrayList
    {
        public  Add(value : 't) : void
        {
            _ = base.Add(value : object);
        }

        public  Append( arraylist : ArrayList['t]) : void
        {
            foreach(a in arraylist) _ = base.Add(a : object);
        }

        
        public Remove(value :  't) : void 
        {
            _ = base.Remove(value : object);
        }
        
        public Insert(index : int, value :  't) : void 
        {
            _ = base.Insert(index, value : object);
        }
        
        public Contains(value :  't) : bool 
        {
            base.Contains(value : object);
        }
        
        new public  Item[index : int] : 't 
        {
            get 
            { 
                base[index] :>  't; 
            }

            set 
            { 
                base[index] = value; 
            }
        }

        /*new public GetRange (index :int, count :int)  :ArrayList['t]
        {
            base.GetRange(index, count) :> ArrayList['t];
            
            System.InvalidCastException: Cannot cast from source type to destination type.

         }*/

        new public Clone() :ArrayList['t]
        {
            //base.Clone() :> ArrayList['t];

            // <<< ugly hack, manual copy/clone
            def new_list = ArrayList() :ArrayList['t];
            foreach(item in this) new_list.Add(item);
            new_list;
        }


        public GetEnumerator() : Nemerle.Collections.IEnumerator['t]
        {
            ArrayListEnumerator( base.GetEnumerator() ) :>  Nemerle.Collections.IEnumerator['t];
        }

        public Slice(_start:int, _stop:int) :ArrayList['t]
        {
            def start = _start;
            mutable stop = _stop;

            when(stop > Count) stop=Count; // always returns only what is aviable
                        
            
            assert(start >=0, "Start index == $start is invalid ");
            //assert(stop <= Count, $"Trying to access at index $(stop-1) the list $this only has $Count elements.");
            assert(stop >= start);
            
            //GetRange (int index, int count)
            //GetRange(start, stop - start /*-1*/);
            //workaround, creates a new list (destroying performance)

            def array_list = ArrayList() :ArrayList['t];
            foreach(c in range(start, stop)) array_list.Add(base[c]);
            array_list;
        }

        public Slice(_:string, stop:int) :ArrayList['t]
        {
            Slice(0, stop);
        }
        
        public Slice(start:int, _:string) :ArrayList['t]
        {
            Slice(start, Count);
        }

        public Slice(_:char, stop:int) :ArrayList['t]
        {
            Slice(0, stop);
        }
        
        public Slice(start:int, _:char) :ArrayList['t]
        {
            Slice(start, Count);
        }


        override public ToString() :string
        {
            mutable text = "";

            foreach(element in this) text += $"$element, ";

            $"[ $text]";
        }
        
    } // end of type ArrayList['t]


    public class ArrayListEnumerator['t] : Nemerle.Collections.IEnumerator['t]
    {

        array_list_enumerator :System.Collections.IEnumerator;
        
        public this(_array_list_enumerator :System.Collections.IEnumerator)
        {
            array_list_enumerator = _array_list_enumerator;
        }
        
        public Current :'t
        {
            get { array_list_enumerator.Current :> 't }
        }

        public MoveNext() :bool
        {
            array_list_enumerator.MoveNext();
        }

        public Reset() :void
        {
            array_list_enumerator.Reset();
        }
    }

    
    #endregion

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    
    #region Hashtable with better ToString()

    /*
    public class Hashtable['k, 'v] :Nemerle.Collections.Hashtable['k, 'v]
    {
        override public ToString() :string
        {
            mutable text = "";
            foreach((k,v) in this.KeyValuePairs) text += $"$(k):$(v),";

            $"{ $text }";
        }
     }*/

    #endregion

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    
    #region Pythonic syntax helpers


    macro len(_list)
    {
        <[ $_list.Count; ]>
    }



    public class range :Nemerle.Collections.IEnumerable[int]
    {
        start :int;
        stop :int;
        
        public this(_start:int, _stop:int)
        {
            (start, stop) = (_start, _stop);
        }

        public this(_stop:int)
        {
            (start, stop) = (0, _stop);
        }

        public GetEnumerator() :Nemerle.Collections.IEnumerator[int]
        {
            RangeEnumerator(start, stop);
        }

    }
    
    public class RangeEnumerator :Nemerle.Collections.IEnumerator[int]
    {

        
        mutable counter :int;
        delta :int;
        start :int;
        stop :int;
        
        public this(_start:int, _stop:int)
        {
            if (_start <= _stop) {
                (start, stop) = (_start, _stop-1);
                delta = +1;
            }
            else {
                (start, stop) = (_start -1, _stop);
                delta = -1;
            }

            counter = start - delta;
        }


        public Current :int
        {
            get {
                /*System.Console.WriteLine(
                       $"RangeEnumerator Current (start, stop, delta, counter) == $start, $stop,  $delta, $counter");
                 System.Console.Out.Flush();*/
                counter;
            }
        }

        public MoveNext() :bool
        {
            /*System.Console.WriteLine(
                   $"RangeEnumerator MoveNext (start, stop, delta, counter) == $start, $stop, $delta, $counter");
             System.Console.Out.Flush();*/
            counter += delta;
            counter <= stop;
        }

        public Reset() :void
        {
            counter = start - delta;
        }
        
    }

    #endregion

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    
        /*
    #region Slices implementation
    macro slice_with_start_and_stop(_list, start, stop)
    syntax ("slice", _list, "[", start, ":", stop, "]")
    {
        <[
          assert($start >=0, "Start index == $start is invalid ");
          assert($stop < $_list.Count,
               "Trying to access at index $stop when the list $_list only has $(_list.Count) elements.");
        
        $_list.GetRange($start, $start - $stop); //GetRange (int index, int count)
          ]>
    }
    
    macro slices_with_start(_list, start)
    syntax ("slice", _list, "[", start, ":", "]")
    {
        <[
        assert($start >=0, "Start index == $start is invalid ");            
        $_list.GetRange($start, $_list.Count - $start);
          ]>
    }
    
    macro slice_with_stop(_list, stop)
    syntax ("slice", _list, "[", ":", stop,"]")
    {
        <[
          assert($stop < $_list.Count,
               "Trying to access at index $stop when the list $_list only has $(_list.Count) elements.");
        $_list.GetRange(0, $stop);
          ]>
    }
    
    #endregion
     */

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
      
    #region Logic operands

    /*
    macro @myand(a,b)
    {
       <[ $a && $b ]>;
    }
        
    macro _or(a,b)
    syntax(a, "or", b)
    {
        a || b;
    }
     */
    
    macro _not(a)
    syntax("not", a)
    {
        <[ ! $a ]>
    }
    
    #endregion

    // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
    
} // end of namespace
