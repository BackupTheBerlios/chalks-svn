/*
The classes that manage the Human Machine Interface
*/

using System;
using System.IO;
using System.Collections;
using System.Guid;

using Gtk;
using Glade;
// For Glade usage look at 
// http://www.mono-project.com/GtkSharp 
// http://primates.ximian.com/~edasque/projects/Tutorial/glade2.html 
// for some hints

using Nini.Config;

using Chalks.ConcurrentEditionWidget;
using Chalks.ConcurrentEdition;
using Chalks.Network;
using Chalks.Gui.ChalksWindow; // access to the log function

namespace Chalks.Gui
{
    
    public class ChalksWindow :IGuiForNetwork
    {
        #region Properties
        static public glade_resource_name :string = "chalks.glade";
        
        static config_source_name :string = "chalks.config";
        config_source :ConfigSourceBase;

        mutable current_file_path :string;
        chalks_window :Window;
        static mutable messages_textview :TextView = null;
        static mutable messages_textview_endmark :TextMark = null;
        command_entry :Entry;

        cce_widget :ConcurrentEditionWidget; // cce == ConcurrentEdition
        public concurrent_editable :ConcurrentEditable;
        network_node :NetworkNode;
            
        commands_past_stack :Stack;
        commands_future_stack :Stack;
        #endregion

        public this()
        {
            // load configurations
            try {
                config_source = XmlConfigSource(config_source_name) :ConfigSourceBase;
            } 
            catch { 
                | _e is System.IO.FileNotFoundException =>
                  config_source = create_default_config_source();
                | _ => ();
            }
            config_source.AutoSave = true; // save at each change
                  
            // create our special widget
            cce_widget = ConcurrentEditionWidget(this); // cce == ConcurrentEdition
            cce_widget.CanFocus = true;

            // create the window
            current_file_path = null;

            Application.Init ();
            
            
			mutable gxml = null :Glade.XML;
			try {
				// chalks.glade file included as a resource "-res:chalks.glade"
				gxml = Glade.XML(null, glade_resource_name, "chalks_window", null);
			} catch {
				| _ is System.ArgumentException => 
					Console.WriteLine($"Could not find the Glade gui embedded resource '$(glade_resource_name)'");
					Console.WriteLine("Will search it as an external file.");
			}
			
			try {
				// chalks.glade file is in the same directory than chalks.exe
				gxml = Glade.XML("./" + glade_resource_name, "chalks_window", null);
			} catch {
				| e is System.ArgumentException => 
					Console.WriteLine($"Could not find the Glade gui resource external file '$(glade_resource_name)'");
					Console.WriteLine($"$e");
			}
			
            chalks_window = gxml.GetWidget("chalks_window") :> Window;

            messages_textview = gxml.GetWidget("messages_textview") :> TextView;
            {
                def buffer = messages_textview.Buffer;
                messages_textview_endmark = buffer.CreateMark("end", buffer.EndIter, false);
            }
            command_entry = gxml.GetWidget("command_entry") :> Entry;
            commands_past_stack  = Stack();
            commands_future_stack = Stack();


            // Connect the custom widget with the existing layout
            def scrolledwindow3 = gxml.GetWidget("scrolledwindow3") :> ScrolledWindow;
            scrolledwindow3.Add(cce_widget);
            scrolledwindow3.ShowAll();

            gxml.Autoconnect (this);

            // instanciate the core objects
            concurrent_editable = ConcurrentEditable(cce_widget);
            network_node = NetworkNode(this, concurrent_editable);
            
            // run
            cce_widget.HasFocus = true; //start with focus on the main text
            Application.Run();
        }
        

        create_default_config_source() :ConfigSourceBase
        { // creates the default configuration file

            def config_source = XmlConfigSource();
            
            _ = config_source.AddConfig("User");
            config_source.Configs["User"].Set("nickname", "");

            _ = config_source.AddConfig("Preferences");

            config_source.Save(config_source_name);
            config_source;

            /* // some Nini examples
            IConfig config = source.Configs["Logging"];
            logFileNameText.Text = config.Get ("File Name");
            maxFileSizeText.Text = config.GetString ("MaxFileSize");
            userNameText.Text = source.Configs["User"].GetInt ("Name");
            source.Save();*/

        }
        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        

        #region Methods called by Network, implementation of IGuiForNetwork

        public set_site_id(site_id :Guid) :void
        {
            cce_widget.set_site_id(site_id);
        }

        public receive_message(_from :Guid, _message :string) :void
        {
            log("received a message");

            throw Exception("to be implemented");
            /*if() {
                test ;
            }*/
            // buffer.Insert(ref iter, "\n" + message); 
            // could be InsertWithTag

        }

        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        
        
        #region Global log method
        static public verbosity_level = 1;
        
        static public log( verbosity :int, message :string) :void
        { // various verbosity levels
            when(verbosity <= verbosity_level) log(message);
        }
        
        static public log(message :string) :void 
        { // alias method
            log(message, array[]:array[TextTag]);
        }

        static public log(message :string, tags :array[TextTag]) :void
        { // the global log method
            if (   (messages_textview         != null) 
                && (messages_textview_endmark != null)) 
            {
                def buffer = messages_textview.Buffer;
                mutable iter = buffer.EndIter.Copy();
                buffer.InsertWithTags(ref iter, "\n" + message, tags);
                messages_textview.ScrollMarkOnscreen(messages_textview_endmark);
                
            }
            else
            {
                Console.WriteLine(message);
                Console.Out.Flush();
            }
        }
        #endregion

        // -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~        

        #region SignalsHandlers
        // Connect the Signals defined in Glade
        
        on_chalks_window_delete_event( _o :object, args :DeleteEventArgs) : void 
        {
            Application.Quit ();
            args.RetVal = true;
            ;
        }
        
        #region Menu items Handlers
        on_new_menu_item_activate (_o :object,  _args : EventArgs) : void
        {
            // confirm that the user want to close the current session
            //<<<

            // do I save the current file before closing ?
            //<<<

            // kill the current server and document
            //<<<

            // start a new fresh server, and a new fresh document
            //<<<

            // change the window title
            ;
        }
        
        on_open_menu_item_activate (_o :object,  _args : EventArgs) : void
        {
            
            //def _ = OpenFileDialog();
            /*def menu_item = o :> MenuItem;
            
            Console.WriteLine(menu_item.Name);
            
            def dialog = 
            match(menu_item.Name)
            {
                | "open_menu_item" => FileSelection("Open a text file");
                | "save_menu_item" => FileEntry("Save the current text file");
                | _ => null;
                  
            };*/


            /*
			| "Open" =>
                                def stream = IO.StreamReader (fs.Filename);
				input.Buffer.Text = stream.ReadToEnd();
 
			| "Save as..." =>
				def s = IO.StreamWriter(fs.Filename);
				s.Write(input.Buffer.Text);
				s.Close();

            */

            
            /*def dialog_name = "open_file_dialog";
            def gxml = Glade.XML(null, glade_resource_name, dialog_name, null);
            def dialog = gxml.GetWidget(dialog_name) :> Dialog;*/
            
            // if editing, confirm that the user wants to kill the session
            //<<<

            // kill the current session
            //<<<

            // select the file to open
            def dialog = FileSelection("Open a text to edit");
            def ret = dialog.Run() :> ResponseType;
            match(ret)
            {
                | ResponseType.Ok => 
                    Console.WriteLine ( "Ok");
                    Console.WriteLine ( dialog.Filename );
                    Console.WriteLine ( dialog.ToString );
                    
                    // <<< reading a new file should be managed at the ConcurrentEdition level

                    // read the file
                    def stream = IO.StreamReader (dialog.Filename);
                    def _text = stream.ReadToEnd();
                    stream.Close();
                    current_file_path = dialog.Filename;
                    // set the text in the current node
                    throw Exception("to be implemented");
                    //<<< cce_widget.set_text(); ? is this good ? should not be in the node ?
                  


                | ResponseType.Cancel => Console.WriteLine ( "Canceled" );
                | _ => Console.WriteLine ( "Unknown answer" );
            }

            dialog.Destroy();
        }
        
        on_save_menu_item_activate(o :object,  args : EventArgs) : void
        {

            // if out file object already exist
            if(current_file_path != null) {   
                // simply flush the data
                def stream = IO.StreamWriter(current_file_path);
                stream.Write(cce_widget.get_text());
                stream.Close();
            }
            else {
                // if it does not exist
                // call the SaveAs menu
                on_save_as_menu_item_activate(o, args);
            }
        }

        on_save_as_menu_item_activate(_o :object,  _args : EventArgs) : void
        {
                        
            //def dialog = File???("Save current document as...");
            // Could not found the default Gtk.Dialog
            def dialog_name = "save_file_dialog";
            def gxml = Glade.XML(null, glade_resource_name, dialog_name, null);
            def dialog = gxml.GetWidget(dialog_name) :> FileChooserDialog; //Dialog;

            def ret = dialog.Run() :> ResponseType;
            match(ret)
            {
                | ResponseType.Ok => 
                  Console.WriteLine ( "Ok");
                    Console.WriteLine ( dialog.Filename );
                    Console.WriteLine ( dialog.GetType().ToString() );
                    Console.WriteLine ( dialog.ToString );

                    current_file_path = dialog.Filename;
                    // flush the data to the new out file object
                    def stream = IO.StreamWriter(current_file_path);
                    stream.Write(cce_widget.get_text());
                    stream.Close();

                    // change the window title
                    // <<<
                    def filename = Path.GetFileName(current_file_path);
                    chalks_window.Title = filename;

                    // change the RendezVous published object
                    // <<<

                | ResponseType.Cancel => Console.WriteLine ( "Canceled" );
                | _ => Console.WriteLine ( "Unknown answer" );
            }

            dialog.Destroy();
        }

        on_quit_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            Application.Quit();
            // TODO The application quit only at the second click 
            // (need to do something to EventArgs ?)
        }
    
        on_about_menu_item_activate(_o :object,  _args : EventArgs) :void
        {                       
            def dialog_name = "about_dialog";
            def gxml = Glade.XML(null, glade_resource_name, dialog_name, null);
            def dialog = gxml.GetWidget(dialog_name) :> Dialog;
            def _ret = dialog.Run() :> ResponseType;
            dialog.Destroy();
        }

        #region Connection and disconnection
        on_connect_menu_item_activate(_o :object, _args : EventArgs) :void
        {
            // Check nickname
            mutable nickname = config_source.Configs["User"].GetString("nickname", "");;

            
            when (nickname == "") {
                def dialog = ChooseNicknameDialog();
                def ret = dialog.Run();
                match(ret) {
                    | ResponseType.Ok => 
                      nickname = dialog.nickname_entry.Text;
                      config_source.Configs["User"].Set("nickname", nickname);
                    | _ => log( "Canceled" );
                }
            }
             
            // Select connection
            when (nickname != "") {

                log("Your nickname is: " + nickname );
                // set nickname
                network_node.set_nickname(nickname);

                def connect_dialog = ConnectionDialog();
                def ret = connect_dialog.Run();
                match(ret)
                {
                    | ResponseType.Ok =>
                      
                      // request password
                      def password_dialog = EnterPasswordDialog();
                      def ret = password_dialog.Run();
                      match(ret)
                      {
                          | ResponseType.Ok =>
                            // set password
                            def password = password_dialog.password_entry.Text;
                            network_node.set_password(password);
                            
                            // obtain the uri and connect to the server
                            def ip_and_port = connect_dialog.server_entry.Text; // 0.0.0.0:0
                            def uri = $"tcp://$(ip_and_port)/chalks"  ;
                            _ = network_node.start_collaborating(uri); // start the show !
                            
                            
                          | ResponseType.Cancel =>
                            log( "Canceled" );
                            
                      
                          | _ => ();
                            
                      }
                      
                     
                    | ResponseType.Cancel =>
                        log( "Canceled" );
                        
                      
                    | _ => ();
                }

                ;
            } // end of when
        }

        on_disconnect_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            ;
        }
        #region


        #region Edit submenu

        on_copy_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            def clipboard = cce_widget.GetClipboard(Gdk.Selection.Clipboard);
            cce_widget.Buffer.CopyClipboard(clipboard);
        }

        on_cut_menu_item_activate(o :object,  args : EventArgs) :void
        {   // copy and delete
            on_copy_menu_item_activate(o,  args);
            on_delete_menu_item_activate(o,  args);
            ;
        }

        on_paste_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            def clipboard = cce_widget.GetClipboard(Gdk.Selection.Clipboard);
            cce_widget.Buffer.PasteClipboard(clipboard);
            ;
        }


        on_delete_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            _ = cce_widget.Buffer.DeleteSelection(true, true);
            /*
            mutable start_iter = TextIter();
            mutable end_iter = TextIter();
                      
            def clipboard = cce_widget.GetClipboard(Gdk.Selection.Clipboard);
            def non_zero_selection = cce_widget.Buffer.GetSelectionBounds(out start_iter, out end_iter);
            when(non_zero_selection)
                cce_widget.Buffer.Delete(ref start_iter, ref end_iter);*/
            ;
        }

        on_preferences_menu_item_activate(_o :object,  _args : EventArgs) :void
        {
            log("to be implemented");
        }
        #endregion

        #endregion

        on_command_entry_activate(_o :object, _args :EventArgs) :void
        {
            log(command_entry.Text);
            commands_past_stack.Push(command_entry.Text);
            command_entry.Text = "";
            commands_future_stack.Clear();
        }

        on_command_entry_key_press_event(_o :object, args :KeyPressEventArgs) :void
        {
            match ( args.Event.Key )
            {
                | Gdk.Key.Up => 
                  commands_future_stack.Push(command_entry.Text);
                  try {
                      command_entry.Text = commands_past_stack.Pop() :>string;
                  } catch { |_ => ();}
                  //command_entry.GrabFocus();
                  //command_entry.GrabDefault();
                  //true;
                  
                | Gdk.Key.Down => 
                  commands_past_stack.Push(command_entry.Text);
                  try {
                      command_entry.Text = commands_future_stack.Pop() :>string;
                  } catch { |_ => ();}
                  //false;
                  
                | _ => 
                  log("Pressed " +  args.Event.Key.ToString() );
                  //false;
            }
        }

        #endregion    


    } // end of ChalksWindow class

    #region Helper Dialogs classes
    class ConnectionDialog
    {

        dialog :Dialog;
        public server_entry :Entry;
        
        public this() 
        { 
            def dialog_name = "connection_dialog";
            def server_entry_name = "server_entry";
            def gxml = Glade.XML(null, ChalksWindow.glade_resource_name, dialog_name, null);

            dialog = gxml.GetWidget(dialog_name) :>Dialog;
            server_entry = gxml.GetWidget(server_entry_name) :>Entry;       
            gxml.Autoconnect (this);
        }
        
        public Run() :ResponseType
        {
            def ret = dialog.Run() :>ResponseType;
            dialog.Destroy();
            ret;
        }
        
        
    } // end of class ConnectToDialog

    #region Choose Nickname Dialog
    class ChooseNicknameDialog
    {
        dialog :Dialog;
        public nickname_entry :Entry;
        ok_button :Button;

        public this()
        { 
            def dialog_name = "choose_nickname_dialog";
            def gxml = Glade.XML(null, ChalksWindow.glade_resource_name, dialog_name, null);
            
            dialog = gxml.GetWidget(dialog_name) :>Dialog;
            nickname_entry = gxml.GetWidget("nickname_entry") :>Entry;
            ok_button = gxml.GetWidget("ok_button") :>Button;
            gxml.Autoconnect (this);

            nickname_entry.Text = System.Environment.UserName;
        }
        
        public Run() :ResponseType
        {
            def ret = dialog.Run() :>ResponseType;
            dialog.Destroy();
            ret;
        }
        
        
        on_nickname_entry_changed(_o :object, _args :EventArgs) :void
        {
            if (nickname_entry.Text.Length < 3)
                ok_button.Sensitive = false;
            else
                ok_button.Sensitive = true;
        }            

    } // end of class ChooseNicknameDialog
    #endregion


    #region Enter Password Dialog
    class EnterPasswordDialog
    {
        dialog :Dialog;
        public password_entry :Entry;

        public this()
        { 
            def dialog_name = "enter_password_dialog";
            def gxml = Glade.XML(null, ChalksWindow.glade_resource_name, dialog_name, null);
            
            dialog = gxml.GetWidget(dialog_name) :>Dialog;
            password_entry = gxml.GetWidget("password_entry") :>Entry;
            gxml.Autoconnect (this);
            
        }
        
        public Run() :ResponseType
        {
            def ret = dialog.Run() :>ResponseType;
            dialog.Destroy();
            ret;
        }
        
        
    } // end of class EnterPasswordDialog
    #endregion

    #endregion


    public interface IGuiForNetwork
    { // Elements of ChalksWindow used by the Network Module
        set_site_id(site_id :Guid) :void;
        receive_message(from :Guid, message :string) :void;
    }

} // end of namespace
